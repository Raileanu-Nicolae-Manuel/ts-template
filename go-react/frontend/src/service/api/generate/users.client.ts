// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "users.proto" (package "users", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UsersService } from "./users";
import type { UpdateUserRequest } from "./users";
import type { GetUserResponse } from "./users";
import type { IdModel } from "./users";
import type { LoginRequest } from "./users";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TokenResponse } from "./users";
import type { RegisterRequest } from "./users";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service users.UsersService
 */
export interface IUsersServiceClient {
    /**
     * @generated from protobuf rpc: Register(users.RegisterRequest) returns (users.TokenResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, TokenResponse>;
    /**
     * @generated from protobuf rpc: Login(users.LoginRequest) returns (users.TokenResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, TokenResponse>;
    /**
     * @generated from protobuf rpc: GetUserById(users.IdModel) returns (users.GetUserResponse);
     */
    getUserById(input: IdModel, options?: RpcOptions): UnaryCall<IdModel, GetUserResponse>;
    /**
     * @generated from protobuf rpc: UpdateUser(users.UpdateUserRequest) returns (users.GetUserResponse);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, GetUserResponse>;
    /**
     * @generated from protobuf rpc: DeleteUser(users.IdModel) returns (users.IdModel);
     */
    deleteUser(input: IdModel, options?: RpcOptions): UnaryCall<IdModel, IdModel>;
}
/**
 * @generated from protobuf service users.UsersService
 */
export class UsersServiceClient implements IUsersServiceClient, ServiceInfo {
    typeName = UsersService.typeName;
    methods = UsersService.methods;
    options = UsersService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Register(users.RegisterRequest) returns (users.TokenResponse);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, TokenResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterRequest, TokenResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Login(users.LoginRequest) returns (users.TokenResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, TokenResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, TokenResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserById(users.IdModel) returns (users.GetUserResponse);
     */
    getUserById(input: IdModel, options?: RpcOptions): UnaryCall<IdModel, GetUserResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<IdModel, GetUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser(users.UpdateUserRequest) returns (users.GetUserResponse);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, GetUserResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, GetUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteUser(users.IdModel) returns (users.IdModel);
     */
    deleteUser(input: IdModel, options?: RpcOptions): UnaryCall<IdModel, IdModel> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<IdModel, IdModel>("unary", this._transport, method, opt, input);
    }
}

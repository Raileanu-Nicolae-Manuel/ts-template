// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "calculoator.proto" (package "calculator", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message calculator.SumRequest
 */
export interface SumRequest {
    /**
     * @generated from protobuf field: int32 first_number = 1;
     */
    firstNumber: number;
    /**
     * @generated from protobuf field: int32 second_number = 2;
     */
    secondNumber: number;
}
/**
 * @generated from protobuf message calculator.SumResponse
 */
export interface SumResponse {
    /**
     * @generated from protobuf field: int32 result = 1;
     */
    result: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class SumRequest$Type extends MessageType<SumRequest> {
    constructor() {
        super("calculator.SumRequest", [
            { no: 1, name: "first_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "second_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SumRequest>): SumRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firstNumber = 0;
        message.secondNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<SumRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumRequest): SumRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 first_number */ 1:
                    message.firstNumber = reader.int32();
                    break;
                case /* int32 second_number */ 2:
                    message.secondNumber = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 first_number = 1; */
        if (message.firstNumber !== 0)
            writer.tag(1, WireType.Varint).int32(message.firstNumber);
        /* int32 second_number = 2; */
        if (message.secondNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.secondNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message calculator.SumRequest
 */
export const SumRequest = new SumRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumResponse$Type extends MessageType<SumResponse> {
    constructor() {
        super("calculator.SumResponse", [
            { no: 1, name: "result", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SumResponse>): SumResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        if (value !== undefined)
            reflectionMergePartial<SumResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumResponse): SumResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 result */ 1:
                    message.result = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).int32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message calculator.SumResponse
 */
export const SumResponse = new SumResponse$Type();
/**
 * @generated ServiceType for protobuf service calculator.CalculatorService
 */
export const CalculatorService = new ServiceType("calculator.CalculatorService", [
    { name: "Sum", options: {}, I: SumRequest, O: SumResponse }
]);
